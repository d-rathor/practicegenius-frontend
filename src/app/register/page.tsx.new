"use client";

import React, { useState, useEffect } from 'react';
import MainLayout from '@/components/MainLayout';
import Link from 'next/link';
import Image from 'next/image';
import { useRouter } from 'next/navigation';

export default function RegisterPage() {
  const [formData, setFormData] = useState({
    username: '',
    email: '',
    password: '',
    confirmPassword: '',
    agreeToTerms: false
  });
  const [formErrors, setFormErrors] = useState<Record<string, string>>({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const router = useRouter();
  const [returnUrl, setReturnUrl] = useState<string | null>(null);
  
  // Function to handle navigation after successful registration
  const handlePostRegistrationNavigation = () => {
    // Check if there's a pending checkout or returnUrl
    const pendingCheckout = localStorage.getItem('pendingCheckout');
    
    if (returnUrl) {
      // Redirect to the specified return URL
      router.push(returnUrl);
    } else if (pendingCheckout) {
      // Redirect to payments page with the plan from pending checkout
      const checkoutData = JSON.parse(pendingCheckout);
      router.push(`/payments?plan=${checkoutData.plan}`);
    } else {
      // Default redirect to dashboard
      router.push('/dashboard');
    }
  };

  // Check for returnUrl in query parameters and pending checkout
  useEffect(() => {
    if (typeof window !== 'undefined') {
      // Get returnUrl from URL if present
      const urlParams = new URLSearchParams(window.location.search);
      const returnUrlParam = urlParams.get('returnUrl');
      if (returnUrlParam) {
        setReturnUrl(returnUrlParam);
      }
    }
  }, []);

  // Check if user is already logged in
  useEffect(() => {
    if (typeof window !== 'undefined') {
      try {
        const sessionData = localStorage.getItem('practicegenius_session');
        if (sessionData) {
          const session = JSON.parse(sessionData);
          // Check if session is valid and not expired
          if (session && session.user && new Date(session.expires) > new Date()) {
            // User is already logged in, redirect to dashboard
            handlePostRegistrationNavigation();
          }
        }
      } catch (error) {
        console.error('Error checking authentication status:', error);
      }
    }
  }, [router]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
    
    // Clear error when field is edited
    if (formErrors[name]) {
      setFormErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[name];
        return newErrors;
      });
    }
  };

  const validateForm = () => {
    const errors: Record<string, string> = {};
    
    if (!formData.username.trim()) {
      errors.username = 'Username is required';
    } else if (formData.username.length < 3) {
      errors.username = 'Username must be at least 3 characters';
    }
    
    if (!formData.email.trim()) {
      errors.email = 'Email is required';
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      errors.email = 'Please enter a valid email address';
    }
    
    if (!formData.password) {
      errors.password = 'Password is required';
    } else if (formData.password.length < 6) {
      errors.password = 'Password must be at least 6 characters';
    }
    
    if (formData.password !== formData.confirmPassword) {
      errors.confirmPassword = 'Passwords do not match';
    }
    
    if (!formData.agreeToTerms) {
      errors.agreeToTerms = 'You must agree to the terms and conditions';
    }
    
    return errors;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    const errors = validateForm();
    if (Object.keys(errors).length > 0) {
      setFormErrors(errors);
      return;
    }
    
    setIsSubmitting(true);
    setError(null);
    
    try {
      // Check if localStorage is available (not server-side)
      if (typeof window !== 'undefined') {
        // Direct localStorage registration
        let users = [];
        try {
          const storedUsers = localStorage.getItem('practicegenius_users');
          if (storedUsers) {
            users = JSON.parse(storedUsers);
          }
        } catch (e) {
          console.error('Error parsing stored users:', e);
          users = [];
        }
        
        // Check if user already exists
        const existingUser = users.find((u: any) => 
          u.email === formData.email || u.username === formData.username
        );
        
        if (existingUser) {
          setError('User with this email or username already exists');
          setIsSubmitting(false);
          return;
        }
        
        // Create new user
        const newUser = {
          id: Date.now().toString(),
          username: formData.username,
          email: formData.email,
          password: formData.password, // In a real app, this would be hashed
          role: 'user',
          subscriptionPlan: 'free',
          createdAt: new Date().toISOString()
        };
        
        users.push(newUser);
        localStorage.setItem('practicegenius_users', JSON.stringify(users));
        
        // Create session
        const mockSession = {
          user: {
            id: newUser.id,
            name: newUser.username,
            email: newUser.email
          },
          expires: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString()
        };
        
        localStorage.setItem('practicegenius_session', JSON.stringify(mockSession));
        
        // Use our navigation helper instead of direct dashboard redirect
        handlePostRegistrationNavigation();
      } else {
        // Handle server-side rendering case
        setError('Registration is not available during server-side rendering');
      }
    } catch (err) {
      console.error('Registration error:', err);
      setError('An error occurred during registration. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleGoogleSignUp = async () => {
    try {
      setError(null);
      
      // Check if localStorage is available (not server-side)
      if (typeof window !== 'undefined') {
        // For development, create a mock Google user
        const googleUser = {
          id: 'google-' + Date.now().toString(),
          username: 'Google User',
          email: 'google-user@example.com',
          googleId: 'mock-google-id-' + Date.now(),
          role: 'user',
          subscriptionPlan: 'free',
          createdAt: new Date().toISOString()
        };
        
        // Store user in localStorage
        let users = [];
        try {
          const storedUsers = localStorage.getItem('practicegenius_users');
          if (storedUsers) {
            users = JSON.parse(storedUsers);
          }
        } catch (e) {
          console.error('Error parsing stored users:', e);
          users = [];
        }
        
        users.push(googleUser);
        localStorage.setItem('practicegenius_users', JSON.stringify(users));
        
        // Create session
        const mockSession = {
          user: {
            id: googleUser.id,
            name: googleUser.username,
            email: googleUser.email
          },
          expires: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString()
        };
        
        localStorage.setItem('practicegenius_session', JSON.stringify(mockSession));
        
        // Use our navigation helper instead of direct dashboard redirect
        handlePostRegistrationNavigation();
      }
    } catch (error) {
      console.error('Google sign up error:', error);
      setError('An error occurred during Google sign up. Please try again.');
    }
  };

  return (
    <MainLayout>
      <div className="bg-background min-h-screen pt-20">
        <div className="container mx-auto py-12 px-4">
          <div className="max-w-md mx-auto">
            <div className="text-center mb-8">
              <h1 className="text-3xl font-bold">Create Your Account</h1>
              <p className="text-gray-600 mt-2">
                Join PracticeGenius to access premium educational worksheets
              </p>
            </div>
            
            {error && (
              <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded mb-6">
                {error}
              </div>
            )}
            
            <div className="bg-white rounded-lg shadow-md overflow-hidden">
              <div className="p-6">
                <form onSubmit={handleSubmit}>
                  <div className="mb-4">
                    <label htmlFor="username" className="block text-gray-700 font-medium mb-2">
                      Username
                    </label>
                    <input
                      type="text"
                      id="username"
                      name="username"
                      value={formData.username}
                      onChange={handleChange}
                      className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 ${
                        formErrors.username ? 'border-red-500 focus:ring-red-200' : 'border-gray-300 focus:ring-primary-200'
                      }`}
                      placeholder="Enter your username"
                    />
                    {formErrors.username && (
                      <p className="text-red-500 text-sm mt-1">{formErrors.username}</p>
                    )}
                  </div>
                  
                  <div className="mb-4">
                    <label htmlFor="email" className="block text-gray-700 font-medium mb-2">
                      Email Address
                    </label>
                    <input
                      type="email"
                      id="email"
                      name="email"
                      value={formData.email}
                      onChange={handleChange}
                      className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 ${
                        formErrors.email ? 'border-red-500 focus:ring-red-200' : 'border-gray-300 focus:ring-primary-200'
                      }`}
                      placeholder="Enter your email"
                    />
                    {formErrors.email && (
                      <p className="text-red-500 text-sm mt-1">{formErrors.email}</p>
                    )}
                  </div>
                  
                  <div className="mb-4">
                    <label htmlFor="password" className="block text-gray-700 font-medium mb-2">
                      Password
                    </label>
                    <input
                      type="password"
                      id="password"
                      name="password"
                      value={formData.password}
                      onChange={handleChange}
                      className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 ${
                        formErrors.password ? 'border-red-500 focus:ring-red-200' : 'border-gray-300 focus:ring-primary-200'
                      }`}
                      placeholder="Create a password"
                    />
                    {formErrors.password && (
                      <p className="text-red-500 text-sm mt-1">{formErrors.password}</p>
                    )}
                  </div>
                  
                  <div className="mb-6">
                    <label htmlFor="confirmPassword" className="block text-gray-700 font-medium mb-2">
                      Confirm Password
                    </label>
                    <input
                      type="password"
                      id="confirmPassword"
                      name="confirmPassword"
                      value={formData.confirmPassword}
                      onChange={handleChange}
                      className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 ${
                        formErrors.confirmPassword ? 'border-red-500 focus:ring-red-200' : 'border-gray-300 focus:ring-primary-200'
                      }`}
                      placeholder="Confirm your password"
                    />
                    {formErrors.confirmPassword && (
                      <p className="text-red-500 text-sm mt-1">{formErrors.confirmPassword}</p>
                    )}
                  </div>
                  
                  <div className="mb-6">
                    <div className="flex items-start">
                      <div className="flex items-center h-5">
                        <input
                          id="agreeToTerms"
                          name="agreeToTerms"
                          type="checkbox"
                          checked={formData.agreeToTerms}
                          onChange={handleChange}
                          className={`h-4 w-4 rounded border-gray-300 text-primary focus:ring-primary ${
                            formErrors.agreeToTerms ? 'border-red-500' : ''
                          }`}
                        />
                      </div>
                      <div className="ml-3 text-sm">
                        <label htmlFor="agreeToTerms" className="text-gray-600">
                          I agree to the <a href="#" className="text-primary hover:underline">Terms of Service</a> and <a href="#" className="text-primary hover:underline">Privacy Policy</a>
                        </label>
                        {formErrors.agreeToTerms && (
                          <p className="text-red-500 text-sm mt-1">{formErrors.agreeToTerms}</p>
                        )}
                      </div>
                    </div>
                  </div>
                  
                  <button
                    type="submit"
                    disabled={isSubmitting}
                    className="w-full bg-primary text-white py-2 px-4 rounded-md hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 transition-colors disabled:opacity-50"
                  >
                    {isSubmitting ? 'Creating Account...' : 'Create Account'}
                  </button>
                </form>
                
                <div className="mt-6">
                  <div className="relative">
                    <div className="absolute inset-0 flex items-center">
                      <div className="w-full border-t border-gray-300"></div>
                    </div>
                    <div className="relative flex justify-center text-sm">
                      <span className="px-2 bg-white text-gray-500">Or continue with</span>
                    </div>
                  </div>
                  
                  <div className="mt-6">
                    <button
                      type="button"
                      onClick={handleGoogleSignUp}
                      className="w-full flex items-center justify-center bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary"
                    >
                      <svg className="h-5 w-5 mr-2" viewBox="0 0 24 24" width="24" height="24">
                        <g transform="matrix(1, 0, 0, 1, 27.009001, -39.238998)">
                          <path fill="#4285F4" d="M -3.264 51.509 C -3.264 50.719 -3.334 49.969 -3.454 49.239 L -14.754 49.239 L -14.754 53.749 L -8.284 53.749 C -8.574 55.229 -9.424 56.479 -10.684 57.329 L -10.684 60.329 L -6.824 60.329 C -4.564 58.239 -3.264 55.159 -3.264 51.509 Z"/>
                          <path fill="#34A853" d="M -14.754 63.239 C -11.514 63.239 -8.804 62.159 -6.824 60.329 L -10.684 57.329 C -11.764 58.049 -13.134 58.489 -14.754 58.489 C -17.884 58.489 -20.534 56.379 -21.484 53.529 L -25.464 53.529 L -25.464 56.619 C -23.494 60.539 -19.444 63.239 -14.754 63.239 Z"/>
                          <path fill="#FBBC05" d="M -21.484 53.529 C -21.734 52.809 -21.864 52.039 -21.864 51.239 C -21.864 50.439 -21.724 49.669 -21.484 48.949 L -21.484 45.859 L -25.464 45.859 C -26.284 47.479 -26.754 49.299 -26.754 51.239 C -26.754 53.179 -26.284 54.999 -25.464 56.619 L -21.484 53.529 Z"/>
                          <path fill="#EA4335" d="M -14.754 43.989 C -12.984 43.989 -11.404 44.599 -10.154 45.789 L -6.734 42.369 C -8.804 40.429 -11.514 39.239 -14.754 39.239 C -19.444 39.239 -23.494 41.939 -25.464 45.859 L -21.484 48.949 C -20.534 46.099 -17.884 43.989 -14.754 43.989 Z"/>
                        </g>
                      </svg>
                      Sign up with Google
                    </button>
                  </div>
                </div>
                
                <div className="mt-6 text-center text-sm">
                  <p className="text-gray-600">
                    Already have an account?{' '}
                    <Link href="/login" className="text-primary font-medium hover:underline">
                      Log in
                    </Link>
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </MainLayout>
  );
}
